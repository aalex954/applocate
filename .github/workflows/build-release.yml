name: applocate - CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read    # principle of least privilege; elevated later only where required
  actions: read
  checks: read

concurrency: applocate-${{ github.ref }}

env:
  SOLUTION_FILE: AppLocate.sln
  PROJECT_PATH: src/AppLocate.Cli/AppLocate.Cli.csproj
  CONFIGURATION: Release

jobs:
  build-test:
    name: Build & Test
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Build (deterministic)
      run: >-
        dotnet build ${{ env.SOLUTION_FILE }} -c ${{ env.CONFIGURATION }} --no-restore /nowarn:1591
        -p:ContinuousIntegrationBuild=true -p:Deterministic=true
        -p:PathMap="C:\\Users\\runneradmin=/_src_" -p:UseSourceLink=true

    - name: Cleanup obsolete snapshots
      shell: pwsh
      run: |
        $patterns = 'CliSnapshotTests.Query_Vscode_*.verified.txt','CliSnapshotTests.Query_Vscode_*.received.txt'
        foreach ($pat in $patterns) {
          $obsolete = Get-ChildItem -Path tests/AppLocate.Cli.Tests/Snapshots/CliSnapshots -Filter $pat -ErrorAction SilentlyContinue
          if ($obsolete) { $obsolete | Remove-Item -Force }
        }

    - name: Test
      run: >-
        dotnet test ${{ env.SOLUTION_FILE }} -c ${{ env.CONFIGURATION }}
        --logger trx --results-directory TestResults /nowarn:1591
        -p:ContinuousIntegrationBuild=true -p:Deterministic=true

    - name: Generate Test Report (HTML + Summary)
      if: always()
      shell: pwsh
      run: |
        $trxFiles = Get-ChildItem TestResults -Filter *.trx -Recurse -ErrorAction SilentlyContinue
        if (-not $trxFiles) {
          Write-Warning 'No TRX files found; skipping report generation.'
          exit 0
        }
        $allResults = @()
        $countersAgg = [ordered]@{ total=0; executed=0; passed=0; failed=0; error=0; timeout=0; aborted=0; inconclusive=0; notExecuted=0; notRunnable=0; warning=0 }
        $counterKeys = @('total','executed','passed','failed','error','timeout','aborted','inconclusive','notExecuted','notRunnable','warning')
        foreach ($f in $trxFiles) {
          [xml]$xml = Get-Content $f.FullName
          $c = $xml.TestRun.ResultSummary.Counters
          foreach ($k in $counterKeys) {
            if ($c.PSObject.Properties[$k]) {
              $val = $c.$k
              if ($val -as [int]) { $countersAgg[$k] += [int]$val }
            }
          }
          $xml.TestRun.Results.UnitTestResult | ForEach-Object {
            $allResults += [pscustomobject]@{
              TestName = $_.testName
              Outcome  = $_.outcome
              Duration = $_.duration
              File     = $f.Name
            }
          }
        }

        $failed = $allResults | Where-Object { $_.Outcome -ne 'Passed' }
        $timestamp = (Get-Date).ToString('u')

        # HTML
        $html = @()
        $html += '<!DOCTYPE html><html><head><meta charset="utf-8" />'
        $html += '<title>applocate Test Report</title>'
        $html += '<style>body{font-family:Segoe UI,Arial,sans-serif;margin:1.5rem;color:#222}table{border-collapse:collapse;margin-top:1rem}th,td{border:1px solid #ccc;padding:4px 8px;font-size:13px}th{background:#f5f5f5}.fail{color:#b00;font-weight:600}.ok{color:#060}code{background:#f0f0f0;padding:2px 4px;border-radius:3px}</style>'
        $html += '</head><body>'
        $html += "<h1>applocate Test Report</h1><p><strong>Generated:</strong> $timestamp UTC</p>"
        $html += '<h2>Summary</h2>'
        $html += '<table><thead><tr><th>Total</th><th>Executed</th><th>Passed</th><th>Failed</th><th>Error</th><th>Timeout</th><th>Aborted</th><th>Warnings</th></tr></thead>'
        $html += ('<tbody><tr>' + ($countersAgg.total,$countersAgg.executed,$countersAgg.passed,$countersAgg.failed,$countersAgg.error,$countersAgg.timeout,$countersAgg.aborted,$countersAgg.warning | ForEach-Object { "<td>$_</td>" }) -join '' + '</tr></tbody></table>')
        if ($failed) {
          $html += '<h2>Failed / Non-Passed Tests</h2>'
          $html += '<table><thead><tr><th>Test</th><th>Outcome</th><th>Duration</th><th>TRX</th></tr></thead><tbody>'
          foreach ($r in $failed) {
            $cls = if ($r.Outcome -eq 'Failed') { 'fail' } else { '' }
            $html += "<tr class='$cls'><td><code>$($r.TestName)</code></td><td>$($r.Outcome)</td><td>$($r.Duration)</td><td>$($r.File)</td></tr>"
          }
          $html += '</tbody></table>'
        } else {
          $html += '<p><strong>All tests passed.</strong></p>'
        }
        $html += '<hr/><p style="font-size:11px;color:#666">Generated from TRX files. Raw TRX not uploaded.</p>'
        $html += '</body></html>'
        $outFile = 'TestResults/test-report.html'
        $html -join "`n" | Out-File $outFile -Encoding UTF8
        Write-Host "HTML report written to $outFile"

        # Markdown summary
        $md = @()
        $md += '### Test Summary'
        $md += ''
        $md += "Total: **$($countersAgg.total)**  Passed: **$($countersAgg.passed)**  Failed: **$($countersAgg.failed)**  Errors: **$($countersAgg.error)**  Timeout: **$($countersAgg.timeout)**"
        if ($failed) {
          $failedCount = $failed.Count
          $md += ''
          $md += '**Failures:**'
          foreach ($f in ($failed | Select-Object -First 15)) { $md += "- $($f.TestName)" }
          if ($failedCount -gt 15) { $remaining = $failedCount - 15; $md += "- ... ($remaining more)" }
        } else { $md += ''; $md += 'All tests passed âœ…' }
        $md -join "`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8

    - name: Upload Test Report (HTML)
      if: always() && github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: TestResults/test-report.html
        if-no-files-found: ignore

  publish:
    name: Publish (matrix)
    needs: build-test
    runs-on: windows-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        rid: [ win-x64, win-arm64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore ${{ env.SOLUTION_FILE }} --runtime ${{ matrix.rid }}

      - name: Publish Single File (hardened)
        run: >-
          dotnet publish ${{ env.PROJECT_PATH }} -c ${{ env.CONFIGURATION }} -r ${{ matrix.rid }}
          -p:PublishSingleFile=true -p:SelfContained=true -p:EnableCompressionInSingleFile=true
          -p:PublishReadyToRun=true -p:Deterministic=true -p:ContinuousIntegrationBuild=true
          -p:PathMap="C:\\Users\\runneradmin=/_src_" -p:UseSourceLink=true
          -o artifacts/${{ matrix.rid }}

      - name: Install CycloneDX Tool
        run: dotnet tool restore

      - name: Generate SBOM (CycloneDX)
        run: >-
          dotnet dotnet-CycloneDX ${{ env.SOLUTION_FILE }} -j -o artifacts/${{ matrix.rid }} -f sbom-${{ matrix.rid }}.json
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1

      - name: Remove Debug Symbols & Misc
        shell: pwsh
        run: |
          Get-ChildItem artifacts/${{ matrix.rid }} -Include *.pdb -File -Recurse | Remove-Item -Force -ErrorAction SilentlyContinue
          # Optionally remove *.xml docs if you decide not to ship them; currently retained.

      - name: Generate Checksums
        shell: pwsh
        run: |
          Get-ChildItem artifacts/${{ matrix.rid }} -File | ForEach-Object {
            $hash = (Get-FileHash $_.FullName -Algorithm SHA256).Hash
            "$hash  $($_.Name)" | Out-File artifacts/${{ matrix.rid }}/SHA256SUMS.txt -Append -Encoding ascii
          }

      - name: Upload Artifact (runtime only)
        uses: actions/upload-artifact@v4
        with:
          name: applocate-${{ matrix.rid }}
          path: |
            artifacts/${{ matrix.rid }}/*.exe
            artifacts/${{ matrix.rid }}/*.xml
            artifacts/${{ matrix.rid }}/SHA256SUMS.txt
            artifacts/${{ matrix.rid }}/sbom-${{ matrix.rid }}.json

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: publish
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Published Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Flatten & Prepare Assets
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path release -Force | Out-Null
          $distRoot = (Resolve-Path dist).Path
          foreach ($ridDir in Get-ChildItem dist -Directory) {
            $ridName = $ridDir.Name -replace '^applocate-',''
            $targetDir = Join-Path release $ridName
            New-Item -ItemType Directory -Path $targetDir -Force | Out-Null
            Get-ChildItem $ridDir.FullName -Recurse -File | ForEach-Object {
              Copy-Item $_.FullName -Destination (Join-Path $targetDir $_.Name) -Force
            }
            # Per-RID checksum file
            $ridChecksum = Join-Path release "SHA256SUMS-$ridName.txt"
            if (Test-Path $ridChecksum) { Remove-Item $ridChecksum -Force }
            Get-ChildItem $targetDir -File | ForEach-Object {
              $hash = (Get-FileHash $_.FullName -Algorithm SHA256).Hash
              "$hash  $ridName/$( $_.Name )" | Out-File $ridChecksum -Append -Encoding ascii
            }
          }
          # Combined checksum with relative paths (rid/filename)
          $checksumAll = Join-Path release 'SHA256SUMS-all.txt'
          if (Test-Path $checksumAll) { Remove-Item $checksumAll -Force }
          Get-ChildItem release -Recurse -File | Where-Object { $_.Name -notmatch '^SHA256SUMS-' -and $_.Name -ne 'SHA256SUMS-all.txt' } | ForEach-Object {
            if ($_.DirectoryName -eq (Resolve-Path release).Path) { return } # skip root files if any
            $rel = (Resolve-Path $_.FullName).Path.Substring((Resolve-Path release).Path.Length + 1)
            $hash = (Get-FileHash $_.FullName -Algorithm SHA256).Hash
            "$hash  $rel" | Out-File $checksumAll -Append -Encoding ascii
          }

      - name: Generate Release Notes (basic)
        id: notes
        shell: pwsh
        run: |
          $tag = $env:GITHUB_REF.Split('/')[-1]
          "## Release $tag`n`nAutomated build." | Out-File release/RELEASE_NOTES.md -Encoding utf8
          echo "notes_path=release/RELEASE_NOTES.md" >> $env:GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          body_path: ${{ steps.notes.outputs.notes_path }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
          files: |
            release/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release SBOM (optional placeholder)
        if: false
        run: echo "Add SBOM generation here later"
